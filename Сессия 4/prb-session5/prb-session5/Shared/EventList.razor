@using System.Text
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@if(_events != null)
{
    <div class="container overflow-auto listColorText" style="height: @StringHeight;">
        @foreach(var ev in _events)
        {
            <div class="textBox eventCard d-flex">
                <div class="d-flex flex-column justify-content-between">
                    <div class="row"> 
                        <p class="title">@ev.Title</p>
                    </div>
                    <div class="row">
                        <p class="subtitle">@ev.Body</p>
                    </div>
                    <div class="row d-flex justify-content-between" style="padding-right: 5%;">
                        <div class="col">
                            <p class="subtitle">@ev.Date</p>
                        </div>
                        <div class="col">
                            <p class="subtitle">@ev.Author</p>
                        </div>
                        <div class="col">
                            <button class="btn-success" @onclick="() => CreateIcsFile(ev)" style="height: 20px; width: 20px;">*</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<script>
        window.downloadFile = (fileName, contentType, content) => {
        const link = document.createElement('a');
        link.href = `data:${contentType};base64,${content}`;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>

@code {
    [Parameter]
    public int? Height { get; set; }
    private string StringHeight { 
        get{
            if(Height == null)
            {
                return "auto";
            } else {
                return $"{Height}px";
            }
        }
    } 

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private List<Event> _events;
    private HttpClient httpClient;

    private async Task FetchData()
    {
        httpClient = new HttpClient();

        _events = await httpClient.GetFromJsonAsync<List<Event>>("https://localhost:7208/api/Events/GetEvents");
    }

    private async Task CreateIcsFile(Event ev)
    {
        StringBuilder sb = new();
        sb.AppendLine("BEGIN:VCALENDAR");
        sb.AppendLine("VERSION:2.0");
        sb.AppendLine("BEGIN:VEVENT");
        sb.AppendLine($"SUMMARY:{ev.Title}");
        sb.AppendLine($"DTSTART:{Convert.ToDateTime(ev.Date).ToString("yyyyMMddTHHmmssZ")}");
        //Добавить время окончания и смещение
        sb.AppendLine($"UID:{Guid.NewGuid()}");
        sb.AppendLine($"DESCRIPTION:{ev.Body}");
        sb.AppendLine($"LOCATION:RUSSIA");
        sb.AppendLine($"ORGANIZER:{ev.Author}");
        sb.AppendLine("STATUS:CONFIRMED");
        sb.AppendLine("PRIORITY:0");
        sb.AppendLine("END:VEVENT");
        sb.AppendLine("END:VCALENDAR");

        string calendarItem = sb.ToString();

        string fileName = $"{ev.Title}.ics";

        byte[] fileBytes = System.Text.Encoding.UTF8.GetBytes(calendarItem);
        string base64Content = Convert.ToBase64String(fileBytes);

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/calendar", base64Content);
    }
}
