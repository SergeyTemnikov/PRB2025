@using System.Text
@using QRCoder




@if(_workers != null)
{
    <div class="overflow-auto d-flex justify-content-start" style="width: @StringWidth;">
        @foreach (var worker in _workers)
        {
            <QrCodePopover QrCodeBytes="ShowQRCode(worker)">
            <div class="textBox workerCard d-flex">
                <div class="d-flex flex-column justify-content-between">
                    <div class="d-flex align-items-center flex-grow-1">
                        <p class="title m-0">@worker.FullName</p>
                    </div>
                    <div>
                        <p class="subtitle">@_positions.Where(x => x.IdPosition == worker.IdPosition).First().NamePosition</p>
                        <p class="subtitle">@worker.Email</p>
                        <p class="subtitle">@worker.WorkPhoneNumber</p>
                        <p class="subtitle">@(Convert.ToDateTime(_workersPrivateInfo.Where(x => x.IdWorker == worker.IdWorker).First().Birthday).ToString("M"))</p>
                    </div>
                </div>
            </div>
            </QrCodePopover>
        }
    </div>
}


@code {
    [Parameter]
    public int? Width { get; set; }
    private string StringWidth
    {
        get
        {
            if (Width == null)
            {
                return "auto";
            }
            else
            {
                return $"{Width}px";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private List<Worker> _workers;
    private List<WorkerPrivateInfo> _workersPrivateInfo;
    private List<Position> _positions;
    private HttpClient httpClient;

    private async Task FetchData()
    {
        httpClient = new HttpClient();

        _workers = await httpClient.GetFromJsonAsync<List<Worker>>("https://localhost:7208/Workers/GetWorkers");
        _workersPrivateInfo = await httpClient.GetFromJsonAsync<List<WorkerPrivateInfo>>("https://localhost:7208/Workers/GetWorkersPrivateInfo");
        _positions = await httpClient.GetFromJsonAsync<List<Position>>("https://localhost:7208/Position/GetPositions");
    }

    private string GenerateVCard(Worker worker)
    {
        var vCard = new StringBuilder();
        vCard.AppendLine("BEGIN:VCARD");
        vCard.AppendLine("VERSION:3.0");
        vCard.AppendLine($"FN:{worker.FullName}");
        vCard.AppendLine($"EMAIL;TYPE=WORK:{worker.Email}");
        vCard.AppendLine($"TEL;TYPE=WORK:{worker.WorkPhoneNumber}");
        vCard.AppendLine($"BDAY:{Convert.ToDateTime(_workersPrivateInfo.Where(x => x.IdWorker == worker.IdWorker).First().Birthday):yyyyMMdd}");
        vCard.AppendLine("END:VCARD");

        return vCard.ToString();
    }

    private byte[] GenerateQRCode(string data)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        return qrCode.GetGraphic(20);
    }

    private Worker selectedWorker;
    private byte[] qrCodeImage;

    private byte[] ShowQRCode(Worker worker)
    {
        selectedWorker = worker;
        var vCardData = GenerateVCard(worker);
        return GenerateQRCode(vCardData);
    }

    private void CloseQRCode()
    {
        selectedWorker = null;
        qrCodeImage = null;
    }
}
